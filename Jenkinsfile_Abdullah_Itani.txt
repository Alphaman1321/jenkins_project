pipeline {
    agent any

    environment {
        VIRTUAL_ENV = 'venv'
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    // Check if the virtual environment exists, if not, create it
                    if (!fileExists("${env.WORKSPACE}/${VIRTUAL_ENV}")) {
                        sh "python -m venv ${VIRTUAL_ENV}"
                    }
                    // Activate the virtual environment and install dependencies
                    sh "source ${VIRTUAL_ENV}/bin/activate && pip install -r requirements.txt"
                }
            }
        }

        stage('Lint') {
            steps {
                script {
                    // Run flake8 to check code style
                    sh "source ${VIRTUAL_ENV}/bin/activate && flake8 app.py"
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    // Run tests using pytest
                    sh "source ${VIRTUAL_ENV}/bin/activate && pytest"
                }
            }
        }

        stage('Coverage') {
            steps {
                script {
                    // Run coverage to collect and report test coverage data
                    sh "source ${VIRTUAL_ENV}/bin/activate && coverage run -m pytest"
                    // Output coverage summary
                    sh "source ${VIRTUAL_ENV}/bin/activate && coverage report"
                    // Generate detailed HTML coverage report
                    sh "source ${VIRTUAL_ENV}/bin/activate && coverage html"
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    // Run bandit to scan for security issues
                    sh "source ${VIRTUAL_ENV}/bin/activate && bandit -r ."
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    // Placeholder for deployment steps
                    echo "Deploying application..."
                }
            }
        }
    }

    post {
        always {
            // Clean up the workspace after the build
            cleanWs()
        }
    }
}
